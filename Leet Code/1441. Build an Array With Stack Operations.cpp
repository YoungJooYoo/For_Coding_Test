class Solution {
public:
    vector<string> buildArray(vector<int>& target, int n) 
    {
        vector<string> result;
        vector<int> st;

        for (int i = 1;  i <= n; ++i) {
            if (find(target.begin(), target.end(), i) != target.end()) {
                result.push_back("Push");
                st.push_back(i);
            }
            else {
                result.push_back("Push");
                result.push_back("Pop");
            }
            if (target == st) return result;
        }

        return result;
    }
};

// https://leetcode.com/problems/build-an-array-with-stack-operations/description/

/*
### 한국어 번역

1441. 스택 연산으로 배열 만들기
난이도: 중간
주제: [정보 없음]
회사: [정보 없음]
힌트: 정수 배열 `target`과 정수 `n`이 주어집니다.

당신은 다음 두 가지 연산이 가능한 빈 스택을 가지고 있습니다:
- "Push": 스택의 상단에 정수를 푸시합니다.
- "Pop": 스택의 상단에 있는 정수를 제거합니다.

또한 [1, n] 범위의 정수 스트림을 가지고 있습니다.

스택에 있는 숫자들이 (아래에서 위로) `target`과 같아지도록 두 스택 연산을 사용하세요. 다음 규칙을 따라야 합니다:
- 정수 스트림이 비어있지 않다면, 스트림에서 다음 정수를 선택하고 스택의 상단에 푸시합니다.
- 스택이 비어있지 않다면, 스택의 상단에 있는 정수를 팝합니다.
- 어떤 순간에 스택에 있는 요소들이 (아래에서 위로) `target`과 같아진다면, 스트림에서 새로운 정수를 읽지 않고 스택에 더 이상의 연산을 수행하지 않습니다.

언급된 규칙을 따라 `target`을 만들기 위해 필요한 스택 연산들을 반환하세요. 유효한 답이 여러 개 있을 경우 그 중 아무거나 반환해도 됩니다.

#### 예시 1:

입력: target = [1,3], n = 3
출력: ["Push", "Push", "Pop", "Push"]
설명: 처음에 스택 s는 비어있습니다. 스택의 마지막 요소가 스택의 상단입니다.
스트림에서 1을 읽고 스택에 푸시합니다. s = [1].
스트림에서 2를 읽고 스택에 푸시합니다. s = [1,2].
스택 상단의 정수를 팝합니다. s = [1].
스트림에서 3을 읽고 스택에 푸시합니다. s = [1,3].

#### 예시 2:

입력: target = [1,2,3], n = 3
출력: ["Push", "Push", "Push"]
설명: 처음에 스택 s는 비어있습니다. 스택의 마지막 요소가 스택의 상단입니다.
스트림에서 1을 읽고 스택에 푸시합니다. s = [1].
스트림에서 2를 읽고 스택에 푸시합니다. s = [1,2].
스트림에서 3을 읽고 스택에 푸시합니다. s = [1,2,3].

#### 예시 3:

입력: target = [1,2], n = 4
출력: ["Push", "Push"]
설명: 처음에 스택 s는 비어있습니다. 스택의 마지막 요소가 스택의 상단입니다.
스트림에서 1을 읽고 스택에 푸시합니다. s = [1].
스트림에서 2를 읽고 스택에 푸시합니다. s = [1,2].
스택이 (아래에서 위로) `target`과 같아졌기 때문에, 스택 연산을 중단합니다.
스트림에서 정수 3을 읽는 답은 허용되지 않습니다.

#### 제약 조건:

- 1 <= target.length <= 100
- 1 <= n <= 100
- 1 <= target[i] <= n
- `target`은 엄격히 증가합니다.

### 요약

이 문제는 정수 배열 `target`과 정수 `n`을 사용하여 "Push"와 "Pop" 연

*/
