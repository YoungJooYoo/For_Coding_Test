class Solution {
public:
    int rearrangeCharacters(const string s, const string target) 
    {
        unordered_map<char, int> freq_s;
        unordered_map<char, int> freq_target;
        int result = INT_MAX;

        for (const auto ch : s) {
            ++freq_s[ch];
        }
        for (const auto ch : target) {
            ++freq_target[ch];
        }

        for (const auto elem : freq_target) {
            if (freq_s.find(elem.first) != freq_s.end()) {
                result = min(result, freq_s[elem.first] / elem.second);
            }
            else {
                return 0;
            }
        }

        return result;
    }
};


// https://leetcode.com/problems/rearrange-characters-to-make-target-string/description/

/*
### 번역

2287. 타겟 문자열 만들기 위한 문자 재배열
난이도: 쉬움
주제: [정보 없음]
회사: [정보 없음]
힌트: 0부터 시작하는 인덱스를 가진 두 문자열 `s`와 `target`이 주어집니다. `s`에서 몇 개의 글자를 가져와 새로운 문자열을 형성할 수 있습니다.

`s`에서 글자를 가져와 재배열하여 형성할 수 있는 `target`의 복사본 최대 개수를 반환하세요.

#### 예시 1:

입력: s = "ilovecodingonleetcode", target = "code"
출력: 2
설명: 
"code"의 첫 번째 복사본을 만들기 위해 인덱스 4, 5, 6, 7의 글자를 가져옵니다.
"code"의 두 번째 복사본을 만들기 위해 인덱스 17, 18, 19, 20의 글자를 가져옵니다.
형성된 문자열은 "ecod"와 "code"이며, 둘 다 "code"로 재배열할 수 있습니다.
최대 두 개의 "code" 복사본을 만들 수 있으므로 2를 반환합니다.

#### 예시 2:

입력: s = "abcba", target = "abc"
출력: 1
설명: 
인덱스 0, 1, 2의 글자를 가져와 "abc"의 한 복사본을 만들 수 있습니다.
최대 한 개의 "abc" 복사본을 만들 수 있으므로 1을 반환합니다.
인덱스 3과 4에 추가적인 'a'와 'b'가 있지만, 인덱스 2의 'c'를 재사용할 수 없으므로 "abc"의 두 번째 복사본을 만들 수 없습니다.

#### 예시 3:

입력: s = "abbaccaddaeea", target = "aaaaa"
출력: 1
설명: 
인덱스 0, 3, 6, 9, 12의 글자를 가져와 "aaaaa"의 한 복사본을 만들 수 있습니다.
최대 한 개의 "aaaaa" 복사본을 만들 수 있으므로 1을 반환합니다.

#### 제약 조건:

- 1 <= s.length <= 100
- 1 <= target.length <= 10
- s와 target은 소문자 영어 알파벳으로 구성됩니다.

### 요약

이 문제는 문자열 `s`에서 글자를 가져와 재배열하여 주어진 `target` 문자열의 복사본을 만드는 것입니다. 목표는 `s`에서 추출하여 재배열할 수 있는 `target`의 최대 복사본 수를 찾는 것입니다.

### 문제 풀이 방향

1. **빈도수 계산**: 먼저 `s`와 `target`에 있는 각 문자의 빈도수를 계산합니다.

2. **타겟 문자열 복사 가능 횟수 계산**: `target`의 각 문자에 대해 `s`에서 해당 문자의 빈도수를 `target`의 해당 문자 빈도수로 나누어 복사 가능한 최대 횟수를 계산합니다.

3. **최소값 찾기**: 모든 문자에 대해 계산된 복사 가능 횟수 중 최소값을 찾아 반환합니다. 이 최소값이 `s`에서 추출하여 재배열할 수 있는 `target`의 최대 복사본 수가 됩니다.

4. **구현**: 간단한 반복문과 배열을 사용하여 위의 단계를 구현할 수 있습니다.

*/
